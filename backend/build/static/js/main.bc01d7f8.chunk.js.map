{"version":3,"sources":["components/React_Dropzone/SingleFileUploadWithProgress.js","components/React_Dropzone/UploadFile.js","App.js","reportWebVitals.js","index.js"],"names":["SingleFileUploadWithProgress","UploadFile","useState","progress","setProgress","images","setImages","onDrop","useCallback","acceptedFiles","user_temp","i","length","push","status","file","console","log","useDropzone","multiple","getRootProps","getInputProps","uploadFiles","fileRejections","a","uploadSingleFile","index","formData","FormData","append","updateStatus","axios","post","headers","onUploadProgress","data","Math","round","loaded","total","then","response","error","temp_imgs","deleteFile","fileName","temp_images","filter","item","name","delete","res","Container","style","display","justifyContent","height","width","alignItems","backgroundColor","border","borderColor","marginTop","Button","variant","onClick","color","flexDirection","map","size","CircularProgress","value","App","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bc01d7f8.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport React, { useEffect, useState } from 'react'\r\n\r\n\r\n\r\n\r\n\r\nfunction SingleFileUploadWithProgress( {file} ) {\r\n    const [progress, setProgress] = useState(0);\r\n\r\n    console.log(\"files\", file)\r\n    const formData = new FormData();\r\n    formData.append(\"file\", file[0]);\r\n    console.log(formData)\r\n\r\n    // console.log(\"files\", file)\r\n    // for(let i=0;i<file?.length;i++){\r\n    //     let formData = new FormData();\r\n    //     formData.append(\"file\", file[i]);\r\n    //     console.log(formData)\r\n    // }\r\n\r\n\r\n\r\n    // const uploaders = file?.map(async (files) => {\r\n\r\n    //     // Initial FormData\r\n    //     console.log(files)\r\n    //     let formData =new FormData();\r\n    //     formData.append(\"file\", files);\r\n\r\n    //     console.log(formData)\r\n        // await axios.post(\"http://localhost:5000/api/data/upload\", formData, {\r\n        //     headers: { \"Content-Type\": \"multipart/form-data\", },\r\n        // }).then(response => {\r\n        //     console.log(\"first\")\r\n        //     console.log(response);\r\n\r\n        // })\r\n    // }\r\n\r\n\r\n\r\n    // );\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    //     const formData = new FormData();\r\n\r\n    //     for (let i = 0; i < file?.length; i++) {\r\n    //         let files = file[i];\r\n    //         formData.append(\"file\", files);\r\n    //         formData.append(\"upload_preset\", \"docs_upload_example_us_preset\");\r\n\r\n\r\n    //         fetch(url, {\r\n    //             method: \"POST\",\r\n    //             body: formData\r\n    //         })\r\n    //             .then((response) => {\r\n    //                 return response.text();\r\n\r\n    //             })\r\n    //             .then((data) => {\r\n    //                 console.log(data)\r\n    //             });\r\n\r\n    //     }\r\n\r\n\r\n    // useEffect(() => {\r\n    //     const upload = async () => {\r\n    //         const url = await uploadFile(file, setProgress);\r\n    //         console.log('url', url)\r\n    //         console.log('file', file)\r\n    //     }\r\n    //     upload();\r\n    // }, [file])\r\n    const uploadFile = (file, onProgress) => {\r\n        console.log(file)\r\n        const url = \"https://api.cloudinary.com/v1_1/demo/image/upload\";\r\n        const key = \"docs_upload_example_us_preset\";\r\n\r\n        return new Promise((res, rej) => {\r\n            const xhr = new XMLHttpRequest();\r\n            xhr.open('POST', url);\r\n\r\n            xhr.onload = () => {\r\n                const resp = JSON.parse(xhr.responseText);\r\n\r\n                res(resp.secure_url);\r\n            }\r\n\r\n            xhr.onerror = (event) => rej(event);\r\n\r\n            xhr.upload.onprogress = (event) => {\r\n                if (event.lengthComputable) {\r\n                    const percentage = (event.loaded / event.total) * 100;\r\n                    onProgress(Math.round(percentage));\r\n\r\n                }\r\n            };\r\n            const formData = new FormData();\r\n            formData.append('file', file);\r\n            formData.append('upload_preset', key);\r\n\r\n            xhr.send(formData)\r\n        })\r\n    }\r\n    return (\r\n        <div>SingleFileUploadWithProgress</div>\r\n    )\r\n}\r\n\r\nexport default SingleFileUploadWithProgress\r\n\r\n","import React, { useCallback, useEffect, useState } from 'react'\r\nimport { useDropzone } from 'react-dropzone';\r\nimport Container from 'react-bootstrap/Container';\r\nimport SingleFileUploadWithProgress from './SingleFileUploadWithProgress';\r\nimport axios from 'axios';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport { Button } from '@mui/material';\r\n\r\n\r\nfunction UploadFile() {\r\n\r\n    const [progress, setProgress] = useState(0);\r\n    //const [storeStatus, setStoreStatus] = useState({});\r\n    //const [prog, SetProg] = useState({});\r\n    const [images, setImages] = useState([])\r\n\r\n    const onDrop = useCallback(acceptedFiles => {\r\n        let user_temp = [...images];\r\n        for (var i = 0; i < acceptedFiles.length; i++) {\r\n            user_temp.push({ status: \"queue\", file: acceptedFiles[i] })\r\n        }\r\n        console.log(user_temp)\r\n        setImages(user_temp)\r\n        console.log(images)\r\n    }, [images])\r\n\r\n\r\n\r\n    const { acceptedFiles, getRootProps, getInputProps, fileRejections, } = useDropzone(\r\n        {\r\n            onDrop,\r\n            multiple: true,\r\n            // onDrop: async (acceptedFiles) => {\r\n\r\n            //     console.log(acceptedFiles)\r\n\r\n\r\n            //     for (let i = 0; i < acceptedFiles.length; i++) {\r\n\r\n            //         const formData = new FormData();\r\n            //         formData.append(\"file\", acceptedFiles[i]);\r\n            //         console.log(acceptedFiles[i])\r\n            //         SetProg({\r\n            //             ...prog, [acceptedFiles[i].name]: {\r\n            //                 status: 'uploading',\r\n            //             },\r\n\r\n            //         })\r\n            //         await axios.post(\"http://localhost:5000/api/data/upload\", formData, {\r\n\r\n            //             headers: { \"Content-Type\": \"multipart/form-data\", },\r\n            //             onUploadProgress: data => {\r\n            //                 //Set the progress value to show the progress bar\r\n            //                 setProgress(Math.round((100 * data.loaded) / data.total))\r\n            //                 // console.log(\"the status is\", status)\r\n            //             },\r\n\r\n            //         }).then(response => {\r\n            //             console.log(response)\r\n\r\n            //             SetProg({\r\n            //                 ...prog, [acceptedFiles[i].name]: {\r\n            //                     status: 'Success',\r\n            //                 },\r\n            //             })\r\n            //         })\r\n\r\n            //     }\r\n\r\n            // },\r\n\r\n        }\r\n    );\r\n\r\n\r\n    const uploadFiles = async () => {\r\n\r\n        console.log(acceptedFiles)\r\n\r\n\r\n        for (var i = 0; i < images.length; i++) {\r\n            if (images[i].status != \"uploaded\" || images[i].status != \"uploading\")\r\n                await uploadSingleFile(i)\r\n        }\r\n\r\n\r\n        // for (let i = 0; i < acceptedFiles.length; i++) {\r\n\r\n\r\n\r\n\r\n\r\n        // const formData = new FormData();\r\n        // formData.append(\"file\", acceptedFiles[i]);\r\n        // //setStoreStatus({...storeStatus, [acceptedFiles[i].name]:{status: \"queued\"}})\r\n        // console.log(acceptedFiles[i])\r\n        // SetProg({\r\n        //     ...prog, [acceptedFiles[i].name]: {\r\n        //         status: 'uploading',\r\n        //     },\r\n\r\n        // })\r\n        // await axios.post(\"http://localhost:5000/api/data/upload\", formData, {\r\n\r\n        //     headers: { \"Content-Type\": \"multipart/form-data\", },\r\n        //     onUploadProgress: data => {\r\n        //         //Set the progress value to show the progress bar\r\n        //         setProgress(Math.round((100 * data.loaded) / data.total))\r\n        //         // console.log(\"the status is\", status)\r\n        //     },\r\n\r\n        // }).then(response => {\r\n        //     console.log(response)\r\n\r\n        //     SetProg({\r\n        //         ...prog, [acceptedFiles[i].name]: {\r\n        //             status: 'Success',\r\n        //         },\r\n        //     })\r\n        // })\r\n\r\n        //  }\r\n\r\n        //console.log(images)\r\n\r\n\r\n    }\r\n    const uploadSingleFile = async (index) => {\r\n        const formData = new FormData();\r\n        formData.append(\"file\", images[index].file)\r\n\r\n        updateStatus(index, \"uploading\")\r\n\r\n\r\n\r\n        await axios.post(\"http://localhost:5000/api/data/upload\", formData, {\r\n            headers: {\r\n                \"Content-Type\": \"multipart/form-data\"\r\n            },\r\n            onUploadProgress: data => {\r\n                //Set the progress value to show the progress bar\r\n                setProgress(Math.round((100 * data.loaded) / data.total))\r\n                // console.log(\"the status is\", status)\r\n            },\r\n        }).then((response) => {\r\n            updateStatus(index, \"uploaded\")\r\n\r\n        }, (error) => {\r\n            updateStatus(index, \"error\")\r\n        });\r\n    }\r\n    const updateStatus = (index, status) => {\r\n        let temp_imgs = [...images]\r\n        temp_imgs[index].status = status\r\n        setImages(temp_imgs)\r\n    }\r\n    console.log(images)\r\n\r\n    const deleteFile = async (fileName, index) => {\r\n        console.log(fileName)\r\n\r\n        if (images[index].status !== \"uploaded\") {\r\n            let temp_images = [...images];\r\n            console.log(\"before\",temp_images)\r\n            temp_images = temp_images.filter(item => item.file.name !== fileName);\r\n            setImages(temp_images)\r\n            console.log(\"after\",temp_images)\r\n        }\r\n        console.log(images)\r\n\r\n        // for(let i=0;i<images.length;i++){\r\n        //     if(images[i].file_)\r\n        // }\r\n\r\n    //     await axios.post(          // any call like get\r\n    //     \"http://localhost:3001/api/users/userData\",         // your URL\r\n    //     {                                     // data if post, put\r\n    //       usertoken: userToken,\r\n    //     }\r\n    //   );\r\n\r\n\r\n\r\n        await axios.delete(`http://localhost:5000/api/data/delete/${fileName}`).then((res)=>{\r\n            console.log(\"file removed.....\")\r\n        })\r\n        \r\n        // {\r\n\r\n        \r\n          \r\n            // onUploadProgress: data => {\r\n            //     //Set the progress value to show the progress bar\r\n            //     setProgress(Math.round((100 * data.loaded) / data.total))\r\n            //     // console.log(\"the status is\", status)\r\n            // },\r\n       // })\r\n        // .then((response) => {\r\n        //     updateStatus(index, \"uploaded\")\r\n\r\n        // }, (error) => {\r\n        //     updateStatus(index, \"error\")\r\n        // });\r\n\r\n    }\r\n    // useEffect(() => {\r\n\r\n    //     let user_temp = [...images];\r\n\r\n    //     for (let i = 0; i < acceptedFiles.length; i++) {\r\n\r\n    //         user_temp.push({ status: \"queue\", file: acceptedFiles[i] })\r\n    //     }\r\n    //     console.log(user_temp)\r\n    //     setImages(user_temp)\r\n\r\n    // }, [acceptedFiles])\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <Container >\r\n                <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                    <div {...getRootProps()}\r\n                        style={{\r\n                            height: \"200px\",\r\n                            width: \"500px\",\r\n                            display: \"flex\",\r\n                            justifyContent: 'center',\r\n                            alignItems: \"center\",\r\n                            backgroundColor: \"rgb(203,203,203)\",\r\n                            border: \"dotted 3px\",\r\n                            borderColor: \"#555\",\r\n                            marginTop: \"20px\",\r\n                        }}>\r\n                        <input {...getInputProps()} />\r\n\r\n                        <p\r\n                        >Drag 'n' drop some files here, or click to select files</p>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n                <div>\r\n                    <Button variant=\"contained\" onClick={() => uploadFiles()} color=\"primary\" style={{ marginTop: \"15px\" }}>\r\n                        Upload Files\r\n                    </Button>\r\n                </div>\r\n                <aside>\r\n                    <h4>Files</h4>\r\n                    \r\n                        <div style={{ display: \"flex\", flexDirection: \"column\", }}>\r\n\r\n\r\n                            {images?.map((item, index) => {\r\n                                return (\r\n                                    <>\r\n                                        <div key={index} style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\", alignItems: \"center\" }}>\r\n                                            <div>\r\n                                                <li >\r\n                                                    {item.file.name} - {item.file.size} bytes\r\n\r\n                                                </li>\r\n                                            </div>\r\n\r\n\r\n                                            <div>\r\n\r\n                                                {\r\n                                                    // prog[file.name] !== undefined ?\r\n                                                    //     prog[file.name].status : \"queued\"\r\n                                                    //    Object.keys(prog).map(name=>console.log(name,file.name))\r\n                                                    // console.log(\"first\")\r\n                                                    item.status\r\n\r\n                                                }\r\n\r\n                                            </div>\r\n                                            <Button variant=\"contained\" onClick={() => deleteFile(item.file.name, index)} color=\"primary\" style={{ marginTop: \"15px\" }}>\r\n                                                Delete File\r\n                                            </Button>\r\n\r\n\r\n\r\n                                            <div>\r\n                                                <CircularProgress variant=\"determinate\" value={progress} />\r\n                                            </div>\r\n                                        </div>\r\n                                    </>\r\n                                )\r\n\r\n                            })}\r\n\r\n\r\n                        </div>\r\n                    \r\n                    {/* <ul>{files}</ul> */}\r\n                    {/* {progress} */}\r\n                    {/* <ul>\r\n                        <SingleFileUploadWithProgress file={files} />\r\n                    </ul> */}\r\n                    {/* <h4>Accepted files</h4>\r\n                    <ul>{files}</ul> */}\r\n                    {/* <h4>Rejected files</h4>\r\n                    <ul>{fileRejectionItems}</ul> */}\r\n                </aside>\r\n                {/* <StandardUploader/> */}\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default UploadFile","import React, { Component } from 'react';\nimport { BrowserRouter as Router,Switch,Route} from \"react-router-dom\";\nimport Home from './components/Home';\nimport Header from './components/Header'\nimport About from './components/About';\nimport Contact from './components/Contact';\nimport UploadFile from './components/React_Dropzone/UploadFile';\n\n class App extends Component {\n  render() {\n    return (\n      <>\n      <UploadFile/>\n      \n      </>\n      // <Router>\n      //   <Header/>\n      //   <Switch>\n      //     <Route path='/About'>\n      //       <About/>\n      //     </Route>\n      //     <Route path='/'>\n      //   <Home title='this is  home page'/>\n        \n      //   </Route>\n      //   </Switch>\n      //   <Contact/>\n      // </Router>\n    );\n  }\n}\n\nexport default App;\n\n// import React, { Component } from 'react'\n// import Registration from './components/Registration'\n// import Login from './components/Login'\n// //import { db } from './fire'\n// import {initializeApp} from 'firebase/app';\n// import { getFirestore } from \"firebase/firestore\"\n// import { getAuth, createUserWithEmailAndPassword } from \"firebase/auth\";\n// import { signInWithEmailAndPassword } from \"firebase/auth\";\n// //import Home from './components/Home';\n// const firebaseConfig = {\n//   apiKey: \"AIzaSyDEv1OCTVY6PBMlNvbvsE426_PnTn-osqI\",\n//   authDomain: \"login-e7ae4.firebaseapp.com\",\n//   projectId: \"login-e7ae4\",\n//   storageBucket: \"login-e7ae4.appspot.com\",\n//   messagingSenderId: \"926158723937\",\n//   appId: \"1:926158723937:web:1196e3c208d39b88a00320\"\n// };\n\n//  initializeApp(firebaseConfig);\n//  const auth = getAuth();\n// //  const db = getFirestore();\n\n\n// //import { getFirestore } from \"firebase/firestore\";\n// //import { collection, addDoc } from \"firebase/firestore\";\n\n\n\n\n// export class App extends Component {\n//   constructor(props) {\n//     super(props)\n  \n//     this.state = {\n//        //page 0=login and 1= register\n//        page: 1,\n//        message:\"\",\n//       //  type: 1   //1= success and 0=error\n//     }\n//   }\n//   pageSwitchHandler=(event)=>{\n//     this.setState({page: !this.state.page , message:''})\n//     event.preventDefault();\n//   }\n  // registrationHandler=(event)=>{\n  //   event.preventDefault();\n  //   const email=event.target.email.value;\n  //   const password=event.target.password.value;\n  //   const confirmPassword=event.target.confirmPassword.value;\n    \n  //   if( password.length< 6){\n  //     this.setState({message:\"password must be 6 character\"});   \n  //     return;\n  //   }\n  //   if(password!==confirmPassword ){\n  //     this.setState({message:\"password does not match \"});   //, type: 0\n  //     return;\n  //   }\n    \n//     createUserWithEmailAndPassword(auth, email, password)\n//     .then((data) => {this.setState({message:'Registered Successfully'},()=>\n//     {\n//       event.target.email.value='';\n//       event.target.password.value='';\n//       event.target.confirmPassword.value=''; \n\n//     })})\n//     .catch((error) => {\n//       this.setState({message: error.message});\n      \n//     });\n    \n\n//   }\n//   loginHandler=(event)=>{\n//     event.preventDefault();\n//     const email=event.target.email.value;\n//     const password=event.target.password.value;\n\n    \n//     signInWithEmailAndPassword(auth, email, password)\n//     .then((data) => {\n//       if(data.user.emailVerified===true)\n//       this.setState({message:'Login Successfully'});\n//       else this.setState({message:'Your email is not verified'});\n    \n//     })\n//   .catch((error) => {\n//     console.log(error);\n//     this.setState({message: error.message});\n    \n//   });\n\n//   }\n  \n//   render() {\n//     return (\n\n//       // <div>\n//       //   {this.state.page ? (\n//       //   <Registration\n//       //    //type={this.state.type}\n//       //    message={this.state.message}\n//       //    switch={this.pageSwitchHandler} \n//       //    register={this.registrationHandler}>\n\n//       //   </Registration> \n//       //  ) : ( \n//       //   <Login \n//       //   message={this.state.message}\n//       //   switch={this.pageSwitchHandler}\n//       //   login={this.loginHandler}\n//       //   >\n\n//       //   </Login>\n//       //   )\n//       // }\n       \n        \n//       // </div>\n//     )\n//   }\n// }\n\n// export default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}